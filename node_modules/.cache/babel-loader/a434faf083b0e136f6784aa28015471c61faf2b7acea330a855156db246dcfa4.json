{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ammar\\\\Documents\\\\app lockin\\\\src\\\\contexts\\\\TimerContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useCallback, useEffect } from 'react';\nimport { useSettings } from './SettingsContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimerContext = /*#__PURE__*/createContext(null);\nexport const TimerProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    settings\n  } = useSettings();\n  const [timeLeft, setTimeLeft] = useState(settings.defaultFocusTime * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [initialTime, setInitialTime] = useState(settings.defaultFocusTime * 60);\n  const [lastSetTime, setLastSetTime] = useState(settings.defaultFocusTime * 60);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  useEffect(() => {\n    let requestId;\n    const updateTimer = timestamp => {\n      if (!lastUpdate) {\n        setLastUpdate(timestamp);\n        requestId = requestAnimationFrame(updateTimer);\n        return;\n      }\n      const deltaTime = timestamp - lastUpdate;\n      if (deltaTime >= 1000) {\n        // Update every second\n        setTimeLeft(prev => {\n          if (prev <= 0) {\n            setIsRunning(false);\n            setIsPaused(false);\n            setLastUpdate(null);\n            return lastSetTime;\n          }\n          return prev - 1;\n        });\n        setLastUpdate(timestamp);\n      }\n      if (isRunning && !isPaused) {\n        requestId = requestAnimationFrame(updateTimer);\n      }\n    };\n    if (isRunning && !isPaused) {\n      requestId = requestAnimationFrame(updateTimer);\n    } else {\n      setLastUpdate(null);\n    }\n    return () => {\n      if (requestId) {\n        cancelAnimationFrame(requestId);\n      }\n    };\n  }, [isRunning, isPaused, lastSetTime]);\n  const toggleTimer = useCallback(() => {\n    if (!isRunning) {\n      setTimeLeft(lastSetTime);\n      setInitialTime(lastSetTime);\n      setIsRunning(true);\n      setIsPaused(false);\n    } else {\n      setIsRunning(false);\n      setIsPaused(false);\n      setTimeLeft(lastSetTime);\n      setInitialTime(lastSetTime);\n    }\n  }, [isRunning, lastSetTime]);\n  const resetTimer = useCallback(() => {\n    setTimeLeft(lastSetTime);\n    setInitialTime(lastSetTime);\n    setIsRunning(false);\n    setIsPaused(false);\n  }, [lastSetTime]);\n  const adjustTime = useCallback(amount => {\n    if (!isRunning && !isPaused) {\n      const newMinutes = Math.max(1, Math.min(120, Math.floor(timeLeft / 60) + amount));\n      const newSeconds = newMinutes * 60;\n      setTimeLeft(newSeconds);\n      setInitialTime(newSeconds);\n      setLastSetTime(newSeconds);\n    }\n  }, [isRunning, isPaused, timeLeft]);\n  const updateSettings = useCallback(time => {\n    const newSeconds = time * 60;\n    setTimeLeft(newSeconds);\n    setInitialTime(newSeconds);\n    setLastSetTime(newSeconds);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TimerContext.Provider, {\n    value: {\n      timeLeft,\n      isRunning,\n      isPaused,\n      initialTime,\n      lastSetTime,\n      toggleTimer,\n      resetTimer,\n      adjustTime,\n      updateSettings,\n      setTimeLeft,\n      setInitialTime,\n      setIsRunning,\n      setLastSetTime,\n      setIsPaused\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(TimerProvider, \"jO8YAfAg2zQBHwiMkumRPZidIZI=\", false, function () {\n  return [useSettings];\n});\n_c = TimerProvider;\nexport const useTimer = () => {\n  _s2();\n  const context = useContext(TimerContext);\n  if (!context) {\n    throw new Error('useTimer must be used within a TimerProvider');\n  }\n  return context;\n};\n_s2(useTimer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TimerProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","useEffect","useSettings","jsxDEV","_jsxDEV","TimerContext","TimerProvider","children","_s","settings","timeLeft","setTimeLeft","defaultFocusTime","isRunning","setIsRunning","isPaused","setIsPaused","initialTime","setInitialTime","lastSetTime","setLastSetTime","lastUpdate","setLastUpdate","requestId","updateTimer","timestamp","requestAnimationFrame","deltaTime","prev","cancelAnimationFrame","toggleTimer","resetTimer","adjustTime","amount","newMinutes","Math","max","min","floor","newSeconds","updateSettings","time","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTimer","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ammar/Documents/app lockin/src/contexts/TimerContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useCallback, useEffect } from 'react';\r\nimport { useSettings } from './SettingsContext';\r\n\r\ninterface TimerContextType {\r\n  timeLeft: number;\r\n  isRunning: boolean;\r\n  isPaused: boolean;\r\n  initialTime: number;\r\n  lastSetTime: number;\r\n  toggleTimer: () => void;\r\n  resetTimer: () => void;\r\n  adjustTime: (amount: number) => void;\r\n  updateSettings: (time: number) => void;\r\n  setTimeLeft: (time: number | ((prev: number) => number)) => void;\r\n  setInitialTime: (time: number) => void;\r\n  setIsRunning: (running: boolean) => void;\r\n  setLastSetTime: (time: number) => void;\r\n  setIsPaused: (paused: boolean) => void;\r\n}\r\n\r\nconst TimerContext = createContext<TimerContextType | null>(null);\r\n\r\nexport const TimerProvider: React.FC<{ children: React.ReactNode }> = ({\r\n  children,\r\n}) => {\r\n  const { settings } = useSettings();\r\n  const [timeLeft, setTimeLeft] = useState(settings.defaultFocusTime * 60);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [initialTime, setInitialTime] = useState(settings.defaultFocusTime * 60);\r\n  const [lastSetTime, setLastSetTime] = useState(settings.defaultFocusTime * 60);\r\n  const [lastUpdate, setLastUpdate] = useState<number | null>(null);\r\n\r\n  useEffect(() => {\r\n    let requestId: number;\r\n\r\n    const updateTimer = (timestamp: number) => {\r\n      if (!lastUpdate) {\r\n        setLastUpdate(timestamp);\r\n        requestId = requestAnimationFrame(updateTimer);\r\n        return;\r\n      }\r\n\r\n      const deltaTime = timestamp - lastUpdate;\r\n      if (deltaTime >= 1000) { // Update every second\r\n        setTimeLeft(prev => {\r\n          if (prev <= 0) {\r\n            setIsRunning(false);\r\n            setIsPaused(false);\r\n            setLastUpdate(null);\r\n            return lastSetTime;\r\n          }\r\n          return prev - 1;\r\n        });\r\n        setLastUpdate(timestamp);\r\n      }\r\n\r\n      if (isRunning && !isPaused) {\r\n        requestId = requestAnimationFrame(updateTimer);\r\n      }\r\n    };\r\n\r\n    if (isRunning && !isPaused) {\r\n      requestId = requestAnimationFrame(updateTimer);\r\n    } else {\r\n      setLastUpdate(null);\r\n    }\r\n\r\n    return () => {\r\n      if (requestId) {\r\n        cancelAnimationFrame(requestId);\r\n      }\r\n    };\r\n  }, [isRunning, isPaused, lastSetTime]);\r\n\r\n  const toggleTimer = useCallback(() => {\r\n    if (!isRunning) {\r\n      setTimeLeft(lastSetTime);\r\n      setInitialTime(lastSetTime);\r\n      setIsRunning(true);\r\n      setIsPaused(false);\r\n    } else {\r\n      setIsRunning(false);\r\n      setIsPaused(false);\r\n      setTimeLeft(lastSetTime);\r\n      setInitialTime(lastSetTime);\r\n    }\r\n  }, [isRunning, lastSetTime]);\r\n\r\n  const resetTimer = useCallback(() => {\r\n    setTimeLeft(lastSetTime);\r\n    setInitialTime(lastSetTime);\r\n    setIsRunning(false);\r\n    setIsPaused(false);\r\n  }, [lastSetTime]);\r\n\r\n  const adjustTime = useCallback((amount: number) => {\r\n    if (!isRunning && !isPaused) {\r\n      const newMinutes = Math.max(1, Math.min(120, Math.floor(timeLeft / 60) + amount));\r\n      const newSeconds = newMinutes * 60;\r\n      setTimeLeft(newSeconds);\r\n      setInitialTime(newSeconds);\r\n      setLastSetTime(newSeconds);\r\n    }\r\n  }, [isRunning, isPaused, timeLeft]);\r\n\r\n  const updateSettings = useCallback((time: number) => {\r\n    const newSeconds = time * 60;\r\n    setTimeLeft(newSeconds);\r\n    setInitialTime(newSeconds);\r\n    setLastSetTime(newSeconds);\r\n  }, []);\r\n\r\n  return (\r\n    <TimerContext.Provider\r\n      value={{\r\n        timeLeft,\r\n        isRunning,\r\n        isPaused,\r\n        initialTime,\r\n        lastSetTime,\r\n        toggleTimer,\r\n        resetTimer,\r\n        adjustTime,\r\n        updateSettings,\r\n        setTimeLeft,\r\n        setInitialTime,\r\n        setIsRunning,\r\n        setLastSetTime,\r\n        setIsPaused\r\n      }}\r\n    >\r\n      {children}\r\n    </TimerContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useTimer = () => {\r\n  const context = useContext(TimerContext);\r\n  if (!context) {\r\n    throw new Error('useTimer must be used within a TimerProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}