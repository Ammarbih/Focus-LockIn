{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ammar\\\\Documents\\\\app lockin\\\\src\\\\contexts\\\\SettingsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultSettings = {\n  soundEnabled: true,\n  defaultFocusTime: 25\n};\nconst SETTINGS_KEY = 'app-settings';\nconst SettingsContext = /*#__PURE__*/createContext(null);\nexport const useSettings = () => {\n  _s();\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n_s(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s2();\n  const [settings, setSettings] = useState(() => {\n    const savedSettings = localStorage.getItem(SETTINGS_KEY);\n    if (savedSettings) {\n      const parsed = JSON.parse(savedSettings);\n      // Zorg ervoor dat defaultFocusTime altijd een geldige waarde heeft\n      return {\n        ...defaultSettings,\n        ...parsed,\n        defaultFocusTime: parsed.defaultFocusTime || 25\n      };\n    }\n    return defaultSettings;\n  });\n  useEffect(() => {\n    localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings));\n  }, [settings]);\n  const updateSettings = newSettings => {\n    setSettings(prev => ({\n      ...prev,\n      ...newSettings\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      settings,\n      updateSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s2(SettingsProvider, \"VcKxCvfIEF4dvan8hQ5f13/pjP4=\");\n_c = SettingsProvider;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","defaultSettings","soundEnabled","defaultFocusTime","SETTINGS_KEY","SettingsContext","useSettings","_s","context","Error","SettingsProvider","children","_s2","settings","setSettings","savedSettings","localStorage","getItem","parsed","JSON","parse","setItem","stringify","updateSettings","newSettings","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ammar/Documents/app lockin/src/contexts/SettingsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nexport interface Settings {\r\n  soundEnabled: boolean;\r\n  defaultFocusTime: number;\r\n}\r\n\r\ninterface SettingsContextType {\r\n  settings: Settings;\r\n  updateSettings: (newSettings: Partial<Settings>) => void;\r\n}\r\n\r\nconst defaultSettings: Settings = {\r\n  soundEnabled: true,\r\n  defaultFocusTime: 25\r\n};\r\n\r\nconst SETTINGS_KEY = 'app-settings';\r\n\r\nconst SettingsContext = createContext<SettingsContextType | null>(null);\r\n\r\nexport const useSettings = () => {\r\n  const context = useContext(SettingsContext);\r\n  if (!context) {\r\n    throw new Error('useSettings must be used within a SettingsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SettingsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [settings, setSettings] = useState<Settings>(() => {\r\n    const savedSettings = localStorage.getItem(SETTINGS_KEY);\r\n    if (savedSettings) {\r\n      const parsed = JSON.parse(savedSettings);\r\n      // Zorg ervoor dat defaultFocusTime altijd een geldige waarde heeft\r\n      return {\r\n        ...defaultSettings,\r\n        ...parsed,\r\n        defaultFocusTime: parsed.defaultFocusTime || 25\r\n      };\r\n    }\r\n    return defaultSettings;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings));\r\n  }, [settings]);\r\n\r\n  const updateSettings = (newSettings: Partial<Settings>) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      ...newSettings\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={{ settings, updateSettings }}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAY9E,MAAMC,eAAyB,GAAG;EAChCC,YAAY,EAAE,IAAI;EAClBC,gBAAgB,EAAE;AACpB,CAAC;AAED,MAAMC,YAAY,GAAG,cAAc;AAEnC,MAAMC,eAAe,gBAAGV,aAAa,CAA6B,IAAI,CAAC;AAEvE,OAAO,MAAMW,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGZ,UAAU,CAACS,eAAe,CAAC;EAC3C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,WAAW;AAQxB,OAAO,MAAMI,gBAAyD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAW,MAAM;IACvD,MAAMkB,aAAa,GAAGC,YAAY,CAACC,OAAO,CAACb,YAAY,CAAC;IACxD,IAAIW,aAAa,EAAE;MACjB,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa,CAAC;MACxC;MACA,OAAO;QACL,GAAGd,eAAe;QAClB,GAAGiB,MAAM;QACTf,gBAAgB,EAAEe,MAAM,CAACf,gBAAgB,IAAI;MAC/C,CAAC;IACH;IACA,OAAOF,eAAe;EACxB,CAAC,CAAC;EAEFH,SAAS,CAAC,MAAM;IACdkB,YAAY,CAACK,OAAO,CAACjB,YAAY,EAAEe,IAAI,CAACG,SAAS,CAACT,QAAQ,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMU,cAAc,GAAIC,WAA8B,IAAK;IACzDV,WAAW,CAACW,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP,GAAGD;IACL,CAAC,CAAC,CAAC;EACL,CAAC;EAED,oBACExB,OAAA,CAACK,eAAe,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAEd,QAAQ;MAAEU;IAAe,CAAE;IAAAZ,QAAA,EAC3DA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACnB,GAAA,CA/BWF,gBAAyD;AAAAsB,EAAA,GAAzDtB,gBAAyD;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}