{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const defaultStats={totalSessions:0,totalMinutes:0,completedSessions:0,averageSessionMinutes:0,lastUpdated:new Date().toISOString(),dailyStats:{}};const STATS_KEY='focusStats';const StatisticsContext=/*#__PURE__*/createContext(null);export const useStatistics=()=>{const context=useContext(StatisticsContext);if(!context){throw new Error('useStatistics must be used within a StatisticsProvider');}return context;};export const StatisticsProvider=_ref=>{let{children}=_ref;const[statistics,setStatistics]=useState(defaultStats);// Load stats from localStorage only if they exist and aren't all zeros\nuseEffect(()=>{const savedStats=localStorage.getItem(STATS_KEY);if(savedStats){const parsedStats=JSON.parse(savedStats);// Only set the stats if they're not all zeros\nif(parsedStats.totalSessions>0||parsedStats.totalMinutes>0||parsedStats.completedSessions>0){setStatistics(parsedStats);}}},[]);useEffect(()=>{localStorage.setItem(STATS_KEY,JSON.stringify(statistics));},[statistics]);const updateSessionStats=(minutes,completed)=>{const today=new Date().toISOString().split('T')[0];setStatistics(prev=>{// Update daily stats\nconst currentDayStats=prev.dailyStats[today]||{sessions:0,minutes:0,completed:0};const updatedDayStats={sessions:currentDayStats.sessions+1,minutes:currentDayStats.minutes+minutes,completed:currentDayStats.completed+(completed?1:0)};// Calculate new totals\nconst newTotalSessions=prev.totalSessions+1;const newTotalMinutes=prev.totalMinutes+minutes;const newCompletedSessions=prev.completedSessions+(completed?1:0);const newAverageMinutes=Math.round(newTotalMinutes/newTotalSessions);return{...prev,totalSessions:newTotalSessions,totalMinutes:newTotalMinutes,completedSessions:newCompletedSessions,averageSessionMinutes:newAverageMinutes,lastUpdated:new Date().toISOString(),dailyStats:{...prev.dailyStats,[today]:updatedDayStats}};});};const resetAllStats=()=>{// First clear localStorage\nlocalStorage.removeItem(STATS_KEY);// Then set state to default stats\nsetStatistics({totalSessions:0,totalMinutes:0,completedSessions:0,averageSessionMinutes:0,lastUpdated:new Date().toISOString(),dailyStats:{}});// Force a save of the zeroed stats\nlocalStorage.setItem(STATS_KEY,JSON.stringify(defaultStats));// Force reload the page to ensure everything is reset\nwindow.location.reload();};return/*#__PURE__*/_jsx(StatisticsContext.Provider,{value:{statistics,updateSessionStats,resetAllStats},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","defaultStats","totalSessions","totalMinutes","completedSessions","averageSessionMinutes","lastUpdated","Date","toISOString","dailyStats","STATS_KEY","StatisticsContext","useStatistics","context","Error","StatisticsProvider","_ref","children","statistics","setStatistics","savedStats","localStorage","getItem","parsedStats","JSON","parse","setItem","stringify","updateSessionStats","minutes","completed","today","split","prev","currentDayStats","sessions","updatedDayStats","newTotalSessions","newTotalMinutes","newCompletedSessions","newAverageMinutes","Math","round","resetAllStats","removeItem","window","location","reload","Provider","value"],"sources":["C:/Users/ammar/Documents/app lockin/src/contexts/StatisticsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\ninterface DailyStats {\r\n  sessions: number;\r\n  minutes: number;\r\n  completed: number;\r\n}\r\n\r\ninterface Statistics {\r\n  totalSessions: number;\r\n  totalMinutes: number;\r\n  completedSessions: number;\r\n  averageSessionMinutes: number;\r\n  lastUpdated: string;\r\n  dailyStats: { [key: string]: DailyStats };\r\n}\r\n\r\ninterface StatisticsContextType {\r\n  statistics: Statistics;\r\n  updateSessionStats: (minutes: number, completed: boolean) => void;\r\n  resetAllStats: () => void;\r\n}\r\n\r\nconst defaultStats: Statistics = {\r\n  totalSessions: 0,\r\n  totalMinutes: 0,\r\n  completedSessions: 0,\r\n  averageSessionMinutes: 0,\r\n  lastUpdated: new Date().toISOString(),\r\n  dailyStats: {}\r\n};\r\n\r\nconst STATS_KEY = 'focusStats';\r\n\r\nconst StatisticsContext = createContext<StatisticsContextType | null>(null);\r\n\r\nexport const useStatistics = () => {\r\n  const context = useContext(StatisticsContext);\r\n  if (!context) {\r\n    throw new Error('useStatistics must be used within a StatisticsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const StatisticsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [statistics, setStatistics] = useState<Statistics>(defaultStats);\r\n\r\n  // Load stats from localStorage only if they exist and aren't all zeros\r\n  useEffect(() => {\r\n    const savedStats = localStorage.getItem(STATS_KEY);\r\n    if (savedStats) {\r\n      const parsedStats = JSON.parse(savedStats);\r\n      // Only set the stats if they're not all zeros\r\n      if (parsedStats.totalSessions > 0 || parsedStats.totalMinutes > 0 || parsedStats.completedSessions > 0) {\r\n        setStatistics(parsedStats);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(STATS_KEY, JSON.stringify(statistics));\r\n  }, [statistics]);\r\n\r\n  const updateSessionStats = (minutes: number, completed: boolean) => {\r\n    const today = new Date().toISOString().split('T')[0];\r\n    \r\n    setStatistics(prev => {\r\n      // Update daily stats\r\n      const currentDayStats = prev.dailyStats[today] || { sessions: 0, minutes: 0, completed: 0 };\r\n      const updatedDayStats = {\r\n        sessions: currentDayStats.sessions + 1,\r\n        minutes: currentDayStats.minutes + minutes,\r\n        completed: currentDayStats.completed + (completed ? 1 : 0)\r\n      };\r\n\r\n      // Calculate new totals\r\n      const newTotalSessions = prev.totalSessions + 1;\r\n      const newTotalMinutes = prev.totalMinutes + minutes;\r\n      const newCompletedSessions = prev.completedSessions + (completed ? 1 : 0);\r\n      const newAverageMinutes = Math.round(newTotalMinutes / newTotalSessions);\r\n\r\n      return {\r\n        ...prev,\r\n        totalSessions: newTotalSessions,\r\n        totalMinutes: newTotalMinutes,\r\n        completedSessions: newCompletedSessions,\r\n        averageSessionMinutes: newAverageMinutes,\r\n        lastUpdated: new Date().toISOString(),\r\n        dailyStats: {\r\n          ...prev.dailyStats,\r\n          [today]: updatedDayStats\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  const resetAllStats = () => {\r\n    // First clear localStorage\r\n    localStorage.removeItem(STATS_KEY);\r\n    \r\n    // Then set state to default stats\r\n    setStatistics({\r\n      totalSessions: 0,\r\n      totalMinutes: 0,\r\n      completedSessions: 0,\r\n      averageSessionMinutes: 0,\r\n      lastUpdated: new Date().toISOString(),\r\n      dailyStats: {}\r\n    });\r\n\r\n    // Force a save of the zeroed stats\r\n    localStorage.setItem(STATS_KEY, JSON.stringify(defaultStats));\r\n\r\n    // Force reload the page to ensure everything is reset\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <StatisticsContext.Provider value={{ statistics, updateSessionStats, resetAllStats }}>\r\n      {children}\r\n    </StatisticsContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}