{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ammar\\\\Documents\\\\app lockin\\\\src\\\\contexts\\\\StatisticsContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultStats = {\n  totalSessions: 0,\n  totalMinutes: 0,\n  completedSessions: 0,\n  averageSessionMinutes: 0,\n  lastUpdated: new Date().toISOString(),\n  dailyStats: {}\n};\nconst STATS_KEY = 'focusStats';\nconst StatisticsContext = /*#__PURE__*/createContext(null);\nexport const useStatistics = () => {\n  _s();\n  const context = useContext(StatisticsContext);\n  if (!context) {\n    throw new Error('useStatistics must be used within a StatisticsProvider');\n  }\n  return context;\n};\n_s(useStatistics, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const StatisticsProvider = ({\n  children\n}) => {\n  _s2();\n  const [statistics, setStatistics] = useState(defaultStats);\n\n  // Load stats from localStorage only if they exist and aren't all zeros\n  useEffect(() => {\n    const savedStats = localStorage.getItem(STATS_KEY);\n    if (savedStats) {\n      const parsedStats = JSON.parse(savedStats);\n      // Only set the stats if they're not all zeros\n      if (parsedStats.totalSessions > 0 || parsedStats.totalMinutes > 0 || parsedStats.completedSessions > 0) {\n        setStatistics(parsedStats);\n      }\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(STATS_KEY, JSON.stringify(statistics));\n  }, [statistics]);\n  const updateSessionStats = (minutes, completed) => {\n    const today = new Date().toISOString().split('T')[0];\n    setStatistics(prev => {\n      // Update daily stats\n      const currentDayStats = prev.dailyStats[today] || {\n        sessions: 0,\n        minutes: 0,\n        completed: 0\n      };\n      const updatedDayStats = {\n        sessions: currentDayStats.sessions + 1,\n        minutes: currentDayStats.minutes + minutes,\n        completed: currentDayStats.completed + (completed ? 1 : 0)\n      };\n\n      // Calculate new totals\n      const newTotalSessions = prev.totalSessions + 1;\n      const newTotalMinutes = prev.totalMinutes + minutes;\n      const newCompletedSessions = prev.completedSessions + (completed ? 1 : 0);\n      const newAverageMinutes = Math.round(newTotalMinutes / newTotalSessions);\n      return {\n        ...prev,\n        totalSessions: newTotalSessions,\n        totalMinutes: newTotalMinutes,\n        completedSessions: newCompletedSessions,\n        averageSessionMinutes: newAverageMinutes,\n        lastUpdated: new Date().toISOString(),\n        dailyStats: {\n          ...prev.dailyStats,\n          [today]: updatedDayStats\n        }\n      };\n    });\n  };\n  const resetAllStats = () => {\n    // First clear localStorage\n    localStorage.removeItem(STATS_KEY);\n\n    // Then set state to default stats\n    setStatistics({\n      totalSessions: 0,\n      totalMinutes: 0,\n      completedSessions: 0,\n      averageSessionMinutes: 0,\n      lastUpdated: new Date().toISOString(),\n      dailyStats: {}\n    });\n\n    // Force a save of the zeroed stats\n    localStorage.setItem(STATS_KEY, JSON.stringify(defaultStats));\n\n    // Force reload the page to ensure everything is reset\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(StatisticsContext.Provider, {\n    value: {\n      statistics,\n      updateSessionStats,\n      resetAllStats\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s2(StatisticsProvider, \"o0VfY0lNC/TuaDcJraltd0EfPBE=\");\n_c = StatisticsProvider;\nvar _c;\n$RefreshReg$(_c, \"StatisticsProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","defaultStats","totalSessions","totalMinutes","completedSessions","averageSessionMinutes","lastUpdated","Date","toISOString","dailyStats","STATS_KEY","StatisticsContext","useStatistics","_s","context","Error","StatisticsProvider","children","_s2","statistics","setStatistics","savedStats","localStorage","getItem","parsedStats","JSON","parse","setItem","stringify","updateSessionStats","minutes","completed","today","split","prev","currentDayStats","sessions","updatedDayStats","newTotalSessions","newTotalMinutes","newCompletedSessions","newAverageMinutes","Math","round","resetAllStats","removeItem","window","location","reload","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ammar/Documents/app lockin/src/contexts/StatisticsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\ninterface DailyStats {\n  sessions: number;\n  minutes: number;\n  completed: number;\n}\n\ninterface Statistics {\n  totalSessions: number;\n  totalMinutes: number;\n  completedSessions: number;\n  averageSessionMinutes: number;\n  lastUpdated: string;\n  dailyStats: { [key: string]: DailyStats };\n}\n\ninterface StatisticsContextType {\n  statistics: Statistics;\n  updateSessionStats: (minutes: number, completed: boolean) => void;\n  resetAllStats: () => void;\n}\n\nconst defaultStats: Statistics = {\n  totalSessions: 0,\n  totalMinutes: 0,\n  completedSessions: 0,\n  averageSessionMinutes: 0,\n  lastUpdated: new Date().toISOString(),\n  dailyStats: {}\n};\n\nconst STATS_KEY = 'focusStats';\n\nconst StatisticsContext = createContext<StatisticsContextType | null>(null);\n\nexport const useStatistics = () => {\n  const context = useContext(StatisticsContext);\n  if (!context) {\n    throw new Error('useStatistics must be used within a StatisticsProvider');\n  }\n  return context;\n};\n\nexport const StatisticsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [statistics, setStatistics] = useState<Statistics>(defaultStats);\n\n  // Load stats from localStorage only if they exist and aren't all zeros\n  useEffect(() => {\n    const savedStats = localStorage.getItem(STATS_KEY);\n    if (savedStats) {\n      const parsedStats = JSON.parse(savedStats);\n      // Only set the stats if they're not all zeros\n      if (parsedStats.totalSessions > 0 || parsedStats.totalMinutes > 0 || parsedStats.completedSessions > 0) {\n        setStatistics(parsedStats);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(STATS_KEY, JSON.stringify(statistics));\n  }, [statistics]);\n\n  const updateSessionStats = (minutes: number, completed: boolean) => {\n    const today = new Date().toISOString().split('T')[0];\n    \n    setStatistics(prev => {\n      // Update daily stats\n      const currentDayStats = prev.dailyStats[today] || { sessions: 0, minutes: 0, completed: 0 };\n      const updatedDayStats = {\n        sessions: currentDayStats.sessions + 1,\n        minutes: currentDayStats.minutes + minutes,\n        completed: currentDayStats.completed + (completed ? 1 : 0)\n      };\n\n      // Calculate new totals\n      const newTotalSessions = prev.totalSessions + 1;\n      const newTotalMinutes = prev.totalMinutes + minutes;\n      const newCompletedSessions = prev.completedSessions + (completed ? 1 : 0);\n      const newAverageMinutes = Math.round(newTotalMinutes / newTotalSessions);\n\n      return {\n        ...prev,\n        totalSessions: newTotalSessions,\n        totalMinutes: newTotalMinutes,\n        completedSessions: newCompletedSessions,\n        averageSessionMinutes: newAverageMinutes,\n        lastUpdated: new Date().toISOString(),\n        dailyStats: {\n          ...prev.dailyStats,\n          [today]: updatedDayStats\n        }\n      };\n    });\n  };\n\n  const resetAllStats = () => {\n    // First clear localStorage\n    localStorage.removeItem(STATS_KEY);\n    \n    // Then set state to default stats\n    setStatistics({\n      totalSessions: 0,\n      totalMinutes: 0,\n      completedSessions: 0,\n      averageSessionMinutes: 0,\n      lastUpdated: new Date().toISOString(),\n      dailyStats: {}\n    });\n\n    // Force a save of the zeroed stats\n    localStorage.setItem(STATS_KEY, JSON.stringify(defaultStats));\n\n    // Force reload the page to ensure everything is reset\n    window.location.reload();\n  };\n\n  return (\n    <StatisticsContext.Provider value={{ statistics, updateSessionStats, resetAllStats }}>\n      {children}\n    </StatisticsContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}