{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const defaultStats={totalSessions:0,totalMinutes:0,completedSessions:0,averageSessionMinutes:0,lastUpdated:new Date().toISOString(),dailyStats:{}};const STATS_KEY='focusStats';const StatisticsContext=createContext(null);export const useStatistics=()=>{const context=useContext(StatisticsContext);if(!context){throw new Error('useStatistics must be used within a StatisticsProvider');}return context;};export const StatisticsProvider=({children})=>{const[statistics,setStatistics]=useState(defaultStats);useEffect(()=>{const savedStats=localStorage.getItem(STATS_KEY);if(savedStats){const parsedStats=JSON.parse(savedStats);if(parsedStats.totalSessions>0||parsedStats.totalMinutes>0||parsedStats.completedSessions>0){setStatistics(parsedStats);}}},[]);useEffect(()=>{localStorage.setItem(STATS_KEY,JSON.stringify(statistics));},[statistics]);const updateSessionStats=(minutes,completed)=>{const today=new Date().toISOString().split('T')[0];setStatistics(prev=>{const currentDayStats=prev.dailyStats[today]||{sessions:0,minutes:0,completed:0};const updatedDayStats={sessions:currentDayStats.sessions+1,minutes:currentDayStats.minutes+minutes,completed:currentDayStats.completed+(completed?1:0)};const newTotalSessions=prev.totalSessions+1;const newTotalMinutes=prev.totalMinutes+minutes;const newCompletedSessions=prev.completedSessions+(completed?1:0);const newAverageMinutes=Math.round(newTotalMinutes/newTotalSessions);return Object.assign({},prev,{totalSessions:newTotalSessions,totalMinutes:newTotalMinutes,completedSessions:newCompletedSessions,averageSessionMinutes:newAverageMinutes,lastUpdated:new Date().toISOString(),dailyStats:Object.assign({},prev.dailyStats,{[today]:updatedDayStats})});});};const resetAllStats=()=>{localStorage.removeItem(STATS_KEY);setStatistics({totalSessions:0,totalMinutes:0,completedSessions:0,averageSessionMinutes:0,lastUpdated:new Date().toISOString(),dailyStats:{}});localStorage.setItem(STATS_KEY,JSON.stringify(defaultStats));window.location.reload();};return _jsx(StatisticsContext.Provider,{value:{statistics,updateSessionStats,resetAllStats},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","defaultStats","totalSessions","totalMinutes","completedSessions","averageSessionMinutes","lastUpdated","Date","toISOString","dailyStats","STATS_KEY","StatisticsContext","useStatistics","context","Error","StatisticsProvider","children","statistics","setStatistics","savedStats","localStorage","getItem","parsedStats","JSON","parse","setItem","stringify","updateSessionStats","minutes","completed","today","split","prev","currentDayStats","sessions","updatedDayStats","newTotalSessions","newTotalMinutes","newCompletedSessions","newAverageMinutes","Math","round","Object","assign","resetAllStats","removeItem","window","location","reload","Provider","value"],"sources":["C:/Users/ammar/Documents/app lockin/src/contexts/StatisticsContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\ninterface DailyStats {\n  sessions: number;\n  minutes: number;\n  completed: number;\n}\n\ninterface Statistics {\n  totalSessions: number;\n  totalMinutes: number;\n  completedSessions: number;\n  averageSessionMinutes: number;\n  lastUpdated: string;\n  dailyStats: { [key: string]: DailyStats };\n}\n\ninterface StatisticsContextType {\n  statistics: Statistics;\n  updateSessionStats: (minutes: number, completed: boolean) => void;\n  resetAllStats: () => void;\n}\n\nconst defaultStats: Statistics = {\n  totalSessions: 0,\n  totalMinutes: 0,\n  completedSessions: 0,\n  averageSessionMinutes: 0,\n  lastUpdated: new Date().toISOString(),\n  dailyStats: {}\n};\n\nconst STATS_KEY = 'focusStats';\n\nconst StatisticsContext = createContext<StatisticsContextType | null>(null);\n\nexport const useStatistics = () => {\n  const context = useContext(StatisticsContext);\n  if (!context) {\n    throw new Error('useStatistics must be used within a StatisticsProvider');\n  }\n  return context;\n};\n\nexport const StatisticsProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [statistics, setStatistics] = useState<Statistics>(defaultStats);\n\n  // Load stats from localStorage only if they exist and aren't all zeros\n  useEffect(() => {\n    const savedStats = localStorage.getItem(STATS_KEY);\n    if (savedStats) {\n      const parsedStats = JSON.parse(savedStats);\n      // Only set the stats if they're not all zeros\n      if (parsedStats.totalSessions > 0 || parsedStats.totalMinutes > 0 || parsedStats.completedSessions > 0) {\n        setStatistics(parsedStats);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(STATS_KEY, JSON.stringify(statistics));\n  }, [statistics]);\n\n  const updateSessionStats = (minutes: number, completed: boolean) => {\n    const today = new Date().toISOString().split('T')[0];\n    \n    setStatistics(prev => {\n      // Update daily stats\n      const currentDayStats = prev.dailyStats[today] || { sessions: 0, minutes: 0, completed: 0 };\n      const updatedDayStats = {\n        sessions: currentDayStats.sessions + 1,\n        minutes: currentDayStats.minutes + minutes,\n        completed: currentDayStats.completed + (completed ? 1 : 0)\n      };\n\n      // Calculate new totals\n      const newTotalSessions = prev.totalSessions + 1;\n      const newTotalMinutes = prev.totalMinutes + minutes;\n      const newCompletedSessions = prev.completedSessions + (completed ? 1 : 0);\n      const newAverageMinutes = Math.round(newTotalMinutes / newTotalSessions);\n\n      return {\n        ...prev,\n        totalSessions: newTotalSessions,\n        totalMinutes: newTotalMinutes,\n        completedSessions: newCompletedSessions,\n        averageSessionMinutes: newAverageMinutes,\n        lastUpdated: new Date().toISOString(),\n        dailyStats: {\n          ...prev.dailyStats,\n          [today]: updatedDayStats\n        }\n      };\n    });\n  };\n\n  const resetAllStats = () => {\n    // First clear localStorage\n    localStorage.removeItem(STATS_KEY);\n    \n    // Then set state to default stats\n    setStatistics({\n      totalSessions: 0,\n      totalMinutes: 0,\n      completedSessions: 0,\n      averageSessionMinutes: 0,\n      lastUpdated: new Date().toISOString(),\n      dailyStats: {}\n    });\n\n    // Force a save of the zeroed stats\n    localStorage.setItem(STATS_KEY, JSON.stringify(defaultStats));\n\n    // Force reload the page to ensure everything is reset\n    window.location.reload();\n  };\n\n  return (\n    <StatisticsContext.Provider value={{ statistics, updateSessionStats, resetAllStats }}>\n      {children}\n    </StatisticsContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}